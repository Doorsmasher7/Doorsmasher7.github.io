import 'package:apptest/screens/Profile/OtherUserProfile.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:apptest/screens/Feed/Post.dart';
import '../../models/userCoreModel.dart';
import 'editpost.dart';

class Postdisplay extends StatefulWidget {
  final postdata;
  const Postdisplay({Key? key, required this.postdata}) : super(key: key);

  @override
  PostdisplayP createState() => PostdisplayP();
}

class PostdisplayP extends State<Postdisplay> {
  User? user = FirebaseAuth.instance.currentUser;

  late Future<String> dataFuture;

  userCoreModel otherUser = userCoreModel();


  @override
  void initState() {
    dataFuture = fetchData();
    FirebaseFirestore.instance
        .collection('users')
        .doc(widget.postdata['userid'])
        .get()
        .then((value) {
      otherUser = userCoreModel.fromMap(value.data());
      setState(() {});
    });
  }

  Future<String> fetchData() async {
    final storageRef = FirebaseStorage.instance.ref();
    final result = await storageRef
        .child(widget.postdata['imageLocation'].toString())
        .getDownloadURL();

    return result;
  }

  Future<String> fetchProfileImage() async {
    final docref = FirebaseFirestore.instance
        .collection("users")
        .doc(widget.postdata['userid']);
    String backgroundImage = "";
    try {
      await docref.get().then((DocumentSnapshot ds) {
        backgroundImage = ds['profilePhoto'];
      });
    } catch (e) {
      backgroundImage = "ProfilePNG.png";
    }
    final storageRef = FirebaseStorage.instance.ref();
    final result = await storageRef.child(backgroundImage).getDownloadURL();
    return result;
  }

  Future<void> deletePost(postid) async {
    if (user?.uid == widget.postdata['userid']) {
      await FirebaseFirestore.instance.collection('posts').doc(postid).delete();
      if (!mounted) return; //if !mounted as async function
      const snackBar1 = SnackBar(
        content: Text('Post Successfully Deleted'),
      );
      ScaffoldMessenger.of(context).showSnackBar(snackBar1);
    } else {
      const snackBar = SnackBar(
        content: Text('You cannot delete post as you did not create the post'),
      );
      ScaffoldMessenger.of(context).showSnackBar(snackBar);
    }
  }

  void popup(BuildContext context) {
    showCupertinoModalPopup(
      context: context,
      builder: (BuildContext context) => CupertinoActionSheet(
        title: const Text('More'),
        actions: <CupertinoActionSheetAction>[
          CupertinoActionSheetAction(
            onPressed: () {
              deletePost(widget.postdata['postid']);
              Navigator.of(context).pop();
            },
            child: const Text('Delete Post'),
          ),
          CupertinoActionSheetAction(
            onPressed: () {
              if (user?.uid == widget.postdata['userid']) {
                Navigator.of(context).push(MaterialPageRoute(
                    builder: (context) => EditPost(
                          postp: 1,
                          postiddata: widget.postdata['postid'].toString(),
                          posttitle: widget.postdata['title'].toString(),
                          postdescription:
                              widget.postdata['description'].toString(),
                        )));
              } else {
                Navigator.of(context).pop();
                const snackBar = SnackBar(
                  content: Text(
                      'You cannot edit post as you did not create the post'),
                  backgroundColor: Colors.pink,
                );
                ScaffoldMessenger.of(context).showSnackBar(snackBar);
              }
            },
            child: const Text('Edit Post'),
          ),
          CupertinoActionSheetAction(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text('Exit'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.only(right: 10.0, left: 10.0),
      //add child: InkWell for button to post
      child: InkWell(
        onTap: () => Navigator.of(context).push(MaterialPageRoute(
          builder: (context) => Post(
              postiddata: widget.postdata['postid'].toString(),
              posttitle: widget.postdata['title'].toString(),
              postname: widget.postdata['name'].toString(),
              postdate: widget.postdata['date'].toString(),
              postuserID: widget.postdata['userid'].toString(),
              postdescription: widget.postdata['description'].toString(),
              postImageLocation: widget.postdata['imageLocation'].toString(),
          ),
        )),
        child: Container(
          constraints: const BoxConstraints(minHeight: 200),
          decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(3),
              boxShadow: const [
                BoxShadow(blurRadius: 5),
              ]),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Column(
                children: <Widget>[
                  Container(
                    padding: const EdgeInsets.symmetric(
                        vertical: 10, horizontal: 20),
                  ),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Row(children: [
                        Padding(
                          padding: EdgeInsets.only(left: 20.0, right: 10.0),
                          child: createCircleAvatar()
                        ),
                        usernameTextButton(),
                      ]),
                      Padding(
                        padding: const EdgeInsets.only(left: 10.0, right: 20.0),
                        child: Text(
                          widget.postdata['date'].toString(),
                          style: const TextStyle(
                              fontSize: 15,
                              fontFamily: 'Montserrat',
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                    ],
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(vertical: 10),
                    child: Text(
                      widget.postdata['title'].toString(),
                      style: const TextStyle(
                          fontSize: 20,
                          decoration: TextDecoration.underline,
                          fontFamily: 'Montserrat',
                          fontWeight: FontWeight.bold),
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(vertical: 2),
                    child: Align(
                      alignment: Alignment.topLeft,
                      child: Padding(
                        padding: const EdgeInsets.only(left: 20.0, right: 20.0),
                        child: Text(
                          widget.postdata['description'].toString(),
                          style: const TextStyle(
                              fontSize: 15,
                              fontFamily: 'Montserrat',
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                    ),
                  ),
                  Container(
                    color: const Color(0xFFFFFFFF),
                    constraints: BoxConstraints(minHeight: 0),
                    padding: const EdgeInsets.symmetric(vertical: 2),
                    alignment: Alignment.topLeft,
                    child: FutureBuilder<String>(
                        future: dataFuture,
                        builder: (BuildContext context,
                            AsyncSnapshot<String> snapshot) {
                          if (widget.postdata['imageURL'].toString() != null) {
                            if (snapshot.hasError) {
                              final error = snapshot.error;
                              return Text('$error');
                            } else if (snapshot.hasData) {
                              return Image.network(snapshot.data.toString());
                            } else {
                              return const Center(
                                child: CircularProgressIndicator(),
                              );
                            }
                          }
                          return Container(
                            color: const Color(0xFFFFFFFF),
                            constraints:
                                BoxConstraints(minHeight: 0, maxHeight: 0),
                            padding: const EdgeInsets.all(20),
                            alignment: Alignment.topLeft,
                          );
                        }),
                  ),
                ],
              ),
              Row(
                children: <Widget>[
                  const Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Icon(
                      Icons.comment,
                      color: Colors.pink,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: IconButton(
                      icon: Icon(Icons.more_horiz),
                      color: Colors.pink,
                      onPressed: () {
                        popup(context);
                      },
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget createCircleAvatar() {

    if(otherUser.profileImageURL.toString() == 'null'){
      return CircleAvatar(
        backgroundColor: Colors.pink,
        radius: MediaQuery.of(context).size.width * 0.055,
        child: CircleAvatar(
            backgroundColor: Colors.white,
            radius: MediaQuery.of(context).size.width * 0.05,
            backgroundImage: AssetImage('images/ProfilePNG.png')
        ),
      );
    } else {
      return CircleAvatar(
        backgroundColor: Colors.pinkAccent,
        radius: MediaQuery.of(context).size.width * 0.055,
        child: CircleAvatar(
          backgroundColor: Colors.white,
          radius: MediaQuery.of(context).size.width * 0.05,
          backgroundImage: NetworkImage(otherUser.profileImageURL.toString()),
        ),
      );
    }

  }

  Widget usernameTextButton() {

    if(widget.postdata['userid'] != user!.uid){
      return  TextButton(
        style: TextButton.styleFrom(
          //foregroundColor: Colors.black,
          textStyle: const TextStyle(
              fontSize: 20,
              fontFamily: 'Montserrat',
              fontWeight: FontWeight.bold),
        ),
        onPressed: () =>
            Navigator.of(context).push(MaterialPageRoute(
              builder: (context) => OtherProfile(
                userprofile: widget.postdata['userid'].toString(),
              ),
            )),
        child: Text(widget.postdata['name'].toString(),
            style: const TextStyle(
                fontSize: 15,
                fontFamily: 'Montserrat',
                fontWeight: FontWeight.bold)),
      );
    }
    else {
      return Text(widget.postdata['name'].toString(),
          style: const TextStyle(
              fontSize: 15,
              fontFamily: 'Montserrat',
              fontWeight: FontWeight.bold)
      );
    }
  }
}

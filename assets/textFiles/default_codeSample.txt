
import 'package:flutter/material.dart';
import 'package:flutter/src/widgets/framework.dart';
import 'package:flutter/src/widgets/placeholder.dart';
import 'dart:html' as html;

class projectScreen_mazeApp extends StatefulWidget {
  const projectScreen_mazeApp({super.key});

  @override
  State<projectScreen_mazeApp> createState() => projectScreen_MazeAppState();
}

class projectScreen_MazeAppState extends State<projectScreen_mazeApp> {

  @override
  Widget build(BuildContext context) {
    return Container(
      alignment: Alignment.center,
      padding: EdgeInsets.fromLTRB(20, 20, 20, 20),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            edgePusher(), //does nothing except ensure that the widget is as wide as the screen
            pageTitle('Maze App'),
            subsubtitle('Final year Team Project'),
            projectSpecs(),
            Overview(),
            Demonstration_Content(),
            projectDiagram(),
            projectImages(),
            SizedBox(height: 300,),
          ],
        )
      )
    );
  }

  Widget projectSpecs(){
    return Container(
      child: Padding(
        padding: EdgeInsets.fromLTRB(20, 10, 20, 10),
        child: Row(
            mainAxisSize: MainAxisSize.max,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
            Container(
              width: 150,
              alignment: Alignment.center,
              decoration: BoxDecoration(
                border: Border.all(
                  color: Colors.blueAccent,
                ),
                borderRadius: BorderRadius.all(Radius.circular(20))
              ),
              child: Padding(
                padding: EdgeInsets.fromLTRB(10, 5, 10, 5), 
                child: Text('Java',
                style: TextStyle(
                  fontSize: 20,
                  color: Colors.blue,
                ),)
              ) 
            ),
            SizedBox(width: 40,),
            Container(
              width: 150,
              alignment: Alignment.center,
              decoration: BoxDecoration(
                border: Border.all(
                  color: Colors.blueAccent,
                ),
                borderRadius: BorderRadius.all(Radius.circular(20))
              ),
              child: Padding(
                padding: EdgeInsets.fromLTRB(10, 5, 10, 5), 
                child: Text('MySQL',
                style: TextStyle(
                  fontSize: 20,
                  color: Colors.blue,
                ),)
              ) 
            ),
            SizedBox(width: 40,),
              Container(
              width: 150,
              alignment: Alignment.center,
              decoration: BoxDecoration(
                border: Border.all(
                  color: Colors.blueAccent,
                ),
                borderRadius: BorderRadius.all(Radius.circular(20))
              ),
              child: Padding(
                padding: EdgeInsets.fromLTRB(10, 5, 10, 5), 
                child: Text('A-star',
                style: TextStyle(
                  fontSize: 20,
                  color: Colors.blue,
                ),)
              ) 
            ),

          ],
        ),
      )
      
      
      );
  } 


  Widget Overview(){

    return Container(
      width: 1000,
      child: Column(
        children: [
          subtitle('Overview'),
          SizedBox(height: 10,),
          Text('For this project we were tasked with designing and making a maze app for the hypothetical company of MazeCo.  The project is intended to allow the end user to create mazes faster and at a higher quality than they currently are  and  thus increasing the potential profits of the  company.  To ensure that the mazes could be shared between designers, the mazes needed to be capable of being saved to a local database for  transportation between systems and they needed to be capable of being  reloaded.  The tool itself needed to have a number of pieces of functionlaity to accomodate  maze editing including the  ability to add and remove walls, randomly generate mazes, change the start and  end locations, add/remove and move art and change browse existing files.'),
          SizedBox(height: 10,),
        ],
      ),
    );
  }

  Widget Demonstration_Content(){

    return Container(
      // alignment: Alignment.center,
      //   decoration: BoxDecoration(
      //     border: Border.all(
      //       color: Colors.blueAccent,
      //     ),
      //     borderRadius: BorderRadius.all(Radius.circular(20))
      //   ),
      width: 800,
      child: Column(
        children: [
          subtitle('Demonstration Content'),
          SizedBox(height: 20,),
          Demonstrations('https://www.youtube.com/watch?v=J3aMdmDOgdA', 'https://github.com/Doorsmasher7/CAB302MazeProjectPersonalCopy'),
          SizedBox(height: 20,),
         ],
      ),
    );
  }


  Widget projectDiagram(){

    return Column(children: [
        subtitle('Project Diagram'),
        SizedBox(height: 20,),
        Container(
          width: 700,
          child: Image(image: AssetImage('Images/mazeAppUML.png'))
        ),
        SizedBox(height: 20,),
        Container(
          width: 1000,
          child: Text('The above class diagram shows the relationship between each of the major back-end classes within the project and how they relate to one another.  Missing from this diagram is a number of UI classes however their functionality was purely display and were  omitted for this reason.  The primary class is the \'MazeManager\' class and it forms the backbone of the entire program as each element  of the maze app interacts with the object to update, modify and maintain it.  The data structure for this object was that of a 2D array as it allowed for easy iteration over every element and without the need to search for a node of an unknown  location, a more complex data structure was not necessary for our purposes. ')
        ),     
        Container(
          width: 1000,
          child: Text('\nThe implementation was completed using a depth-first approach to randomly generate the maze and then an A-Star algorithm to solve the randomly generated maze.  The depth-first appraoch guaranteed that there would always be a viable solution to the maze regardless of how big the maze is and A-star is guaranteed to find a solution if one exists.  If one does not exist, the error handling in the algorithm will return the current shortest path rather than crashing the app.')
        ),
        SizedBox(height: 40,),     
      ],);
    }

    Widget edgePusher(){

    return Row(children: [
        SizedBox(height: 20,),
      ],);
    }

    Widget pageTitle(String title){

    return Text(title,
    style: TextStyle(
      fontSize: 45,
      color: Colors.blue,
      fontWeight: FontWeight.bold,
      decoration: TextDecoration.underline
    ),);
  }

  Widget subtitle(String title){

    return Text(title,
    style: TextStyle(
      fontSize: 26,
      color: Colors.blueAccent,
      
    ),);
  }

    Widget subsubtitle(String title){

    return Text(title,
    style: TextStyle(
      fontSize: 14,
      color: Colors.blueGrey,
      
    ),);
  }


  Widget Demonstrations(String video_link, String code_Link){
    return Container(
      child:  Row(
        mainAxisAlignment: MainAxisAlignment.center,
            children: [
        externalLinkButton(video_link, 'Demonstration Video'),
        externalLinkButton(code_Link,  'Github Code'),
      ],)
    );
  }

  Widget externalLinkButton(String external_Link, String buttonName) {
        return Container(
          width: MediaQuery.of(context).size.width * 0.15,
          padding: EdgeInsets.fromLTRB(10, 5, 10, 5),
          height: 75,
          child: Expanded(
                child: Container(
                  padding: EdgeInsets.fromLTRB(10, 5, 0, 5),
                  child: ElevatedButton(
                    onPressed: () { html.window.open(external_Link, 'name');},
                    child: Text(buttonName,
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                        fontSize: 20,
                        ),  
                    ),
                    style: ElevatedButton.styleFrom(
                      // padding: EdgeInsets.fromLTRB(5, 5, 5, 0),
                      primary: Colors.blueAccent,
                    ),
                  )
                )
              )
        );
  }

  Widget projectImages(){

    return Column(
        children: [
        subtitle('Screenshots'),
        SizedBox(height: 20,),
        Row(
          mainAxisSize: MainAxisSize.max,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Column(
              children: [
                Container(
                  width: 500,
                  child: Image(image: AssetImage('Images/mazeAppImages/mazeapp_mazeUI.jpg'))
                ),
                subtitle('Maze App UI')
              ],
            ),
            SizedBox(width: 20,),
            Column(
              children: [
                Container(
                  width: 300,
                  child: Image(image: AssetImage('Images/mazeAppImages/mazeapp_maze1.jpg'))
                ),
                subtitle('Maze 2')
              ],
            ),
            SizedBox(width: 20,),
            Column(
              children: [
                Container(
                  width: 300,
                  child: Image(image: AssetImage('Images/mazeAppImages/mazeapp_largeArtMaze.jpg'))
                ),
                subtitle('Maze 3')
              ],
            ),
          ],
        )


      ],);
    }


}
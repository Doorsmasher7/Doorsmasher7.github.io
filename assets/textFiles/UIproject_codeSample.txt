This block of code is the class responsible for  tracking the user's data while  the  app is running.  The class servers as the backbone of the app as every piece of the functionality  interacts with the user to some degree.  As  a  result, ensuring a reusuable and flexible structure is  essential.





using System;
using System.Collections.Generic;

namespace UIProject
{
	public class User
	{

		//-----
		//Setup
		//-----

		//all users have this information
		public string name;
		public string password;
		public string email;
		public List<Land> LandIOwn = new List<Land>();
		public List<House> HouseIown = new List<House>();


		//constructor

		public User(string Input_Name, string Input_Password, string Input_Email)
		{
			name = Input_Name;
			password = Input_Password;
			email = Input_Email;
		}

		//-----
		//Public Methods
		//-----

		
		//Lists all the current properties that the user can select, then displays the bids of a selected property
		public void GetBids()
		{

			Menu get_bids_submenu = new Menu();

			foreach (Land Listing_Land in LandIOwn)
			{
				get_bids_submenu.Add($"Land, {Listing_Land.address}, {Listing_Land.post_code}, {Listing_Land.size}sqft", Listing_Land.ListCurrentBids);
			}
			foreach (House Listing_House in HouseIown)
            {
				get_bids_submenu.Add($"House, {Listing_House.address}, {Listing_House.post_code}, {Listing_House.description}", Listing_House.ListCurrentBids);
			}
			get_bids_submenu.Add("Return", do_nothing);
			get_bids_submenu.Display();

		}

		//when called this will print out a list of every property that the current user owns
		public void ListAllThatIOwn()
		{
			int counter = 1;
			foreach(Land property in LandIOwn)
            {
				UserInterface.Message($"{counter}: Land" + "\n" + $"   { property.address}, { property.post_code}, {property.size}sqft.");
				counter = counter + 1;
			}
			foreach (House property in HouseIown)
			{
				UserInterface.Message($"{counter}: House" + "\n" + $"   { property.address}, { property.post_code}, {property.description}.");
				counter = counter + 1;
			}

			if (LandIOwn.Count == 0 && HouseIown.Count == 0)
            {
				UserInterface.Message($"You have no properties advertised, go to the 'Create ad' to place an ad");
            }
		}

		//called when a user either makes a purchase or advertises a new land
		public void AddNewLand(Land new_Land)
		{
			LandIOwn.Add(new_Land);
		}
		public void AddNewHouse(House new_House)
		{
			HouseIown.Add(new_House);
		}

		//removes the property with the matching address and postcode from the current list of properties the user owns
		public void RemoveLand(string property_address, int property_postcode)
		{
			foreach(Land Searched_Land in LandIOwn)
            {
				if (Searched_Land.address == property_address && Searched_Land.post_code ==  property_postcode)
                {
					LandIOwn.Remove(Searched_Land);
					break;
                }
            }
		}

		public void RemoveHouse(string property_address, int property_postcode)
		{
			foreach (House Searched_House in HouseIown)
			{
				if (Searched_House.address == property_address && Searched_House.post_code == property_postcode)
				{
					HouseIown.Remove(Searched_House);
					break;
				}
			}
		}

		//-----
		//Private Methods
		//-----

		private void do_nothing()
        {

        }
	}
}




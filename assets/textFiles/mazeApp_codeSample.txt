In the context of the project, this class allowed us to properly  interact with and manage the  grid, ensure that objects were placed correctly and that the maze would be appropiately generated.


using System;


namespace MazeApp {

    public class GridManager{

        private int width;
        private int height;
        static int max_width = 100;
        static int max_height = 100;
        static int min_width = 5;
        static int min_height = 5;

    
        public Node[] Allnodes = new Node[100001];


        public GridManager(int new_Width, int new_Height){
            
            setHeight(new_Height);
            setWidth(new_Width);
            populateGrid(new_Width, new_Height);
            refresNodes();

        }

    // --------------------
    // GETTERS AND SETTERS
    // --------------------

    public int getWidth() {
        return width;
    }

    public int getHeight(){
        return height;
    }

    public Node[] getNodes(){
        return Allnodes;
    }

    private void setWidth(int new_Width){
        if(new_Width <= max_width && new_Width > min_width){
            width = new_Width;
        }
        else{
            width = 10;
        }
    }

    private void setHeight(int new_Height){
        if(new_Height <= max_height && new_Height > min_height){
            height = new_Height;
        }
        else{
            height = 10;
        }
    }

    private void populateGrid(int width, int height){

        for(int i = 0; i <= width - 1; i++){
            for(int j = 0; j <= height - 1; j++){
                Node FreshNode = new Node(i, j); //create a new node object
                Allnodes[i] = FreshNode; //add the node to the list of all nodes in the grid
            }
        }
    }


    // --------------------
    // Public Functions
    // --------------------

    public void updateGrid(int new_width, int new_height){
        int old_height = height;
        int old_width = width;
        setHeight(new_height);
        setWidth(new_width);

        Node[] temp_col = new Node[100];
        Node[] temp_row = new Node[100];
        Node[] Tempoaray_AllNodes = new Node[10001];

        foreach(Node node in Allnodes){
            //check to see if is inside the new boundaries
            if(node != null){
                if((node.getX() <= width - 1) && (node.getY() <= height - 1) && (node.getX() > -1) && (node.getY() > -1)){
                    Tempoaray_AllNodes[node.getX(), node.getY()] = Allnodes[node.getX(), node.getY()];
                }
            }

        }

        //if the dimensions of the grid have increased in either dimension, new ones will need to be added
        if(height > old_height || width > old_width){
            for(int i = 0; i >= width; i++){
                for(int j = 0; j >= height; j++){
                    if(j >= old_height && i <= old_width){
                        continue;
                    }
                    else{
                        Node FreshNode = new Node(i, j); //create a new node object
                        Tempoaray_AllNodes[i, j] = FreshNode; //add the node to the list of all nodes in the grid
                    }
                }
            }
        }

        Allnodes = Tempoaray_AllNodes;
        refresNodes();
    }

    // --------------------
    // Private Functions
    // --------------------

    private void refresNodes(){
        //perform setup functions for each node
        
        foreach(Node element in Allnodes){
            if(element != null){
                element.checkEdge(element.getX(), element.getY());
                element.updateNeighbours(Allnodes);
            }

        }

    }


    }
    
}